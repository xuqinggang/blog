注意：JavaScript（引擎）是单线程的，Event loop并不属于JavaScript本身，
但JavaScript的运行环境是多线程／多进程的，运行环境实现了Event loop。

Event loop是一种程序结构，是实现异步的一种机制。Event loop可以简单理解为：

1、所有任务都在主线程上执行，形成一个执行栈（execution context stack）。

2、主线程之外，还存在一个"任务队列"（task queue）。系统把异步任务放到"任务队列"之中，
然后主线程继续执行后续的任务。

3、一旦"执行栈"中的所有任务执行完毕，系统就会读取"任务队列"。如果这个时候，
异步任务已经结束了等待状态，就会从"任务队列"进入执行栈，恢复执行。

4、主线程不断重复上面的第三步。

对JavaScript而言，Javascript引擎／虚拟机（如V8）之外，JavaScript的运行环境（runtime，如浏览器，node）
维护了任务队列，每当JS执行异步操作时，运行环境把异步任务放入任务队列。当执行引擎的线程执行完毕（空闲）时，
运行环境就会把任务队列里的（执行完的）任务（的数据和回调函数）交给引擎继续执行，这个过程是一个不断循环的过程，称为事件循环。

同步阻塞
你跟你的女神表白，你女神立即回复你，而你也一直再等女神的回复


同步不阻塞
你跟你的女神表白， 你表白后，没有等女神来得及回复，你去忙你自己的事情了。你的女神立即回复了你


异步阻塞
你跟你的女神表白， 你女神没有立即回复你，说要考虑考虑，过几天答复你，而你也一直再等女神的回复


异步不阻塞
你跟你的女神表白，你表白后， 没有等女神的回复。你去忙你自己的事情了，女神也说她要考虑考虑，过几天再回复你

阻塞非阻塞 是指调用者（表白的那个人） 同步异步 是指被调用者 （被表白的那个人）